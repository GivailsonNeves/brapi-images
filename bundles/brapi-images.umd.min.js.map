{"version":3,"sources":["ng://brapi-images/src/app/brapi-images/models.ts","ng://brapi-images/src/app/brapi-images/product-image.pipe.ts","ng://brapi-images/src/app/brapi-images/brapi-images.module.ts"],"names":["BrapiConfig","InjectionToken","ProductImagePipe","config","_http","this","prototype","transform","value","args","_this","console","log","Promise","resolve","reject","storagePath","window","localStorage","getItem","_requestToken","auth","isExpired","_loginRefresh","_logInApi","subscribe","data","_requestImage","res","error","paramn","type","Observable","create","observer","_data","medida","defaultSize","proposito","eans","skus","post","pathApi","headers","Authorization","token_type","access_token","length","setItem","url","next","username","userName","password","BrapiAuth","fromData","grant_type","refresh_token","Pipe","name","Inject","HttpClient","object","expireIn","Date","getTime","BrapiImagesModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports","imports","CommonModule","HttpClientModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface _BrapiConfig {\n    pathApi: string;\n    userName: string;\n    password: string;\n    proposito: string;\n    defaultSize: number;\n}\n\nexport const BrapiConfig = new InjectionToken<_BrapiConfig>(\"BrapiConfig\");","import { Pipe, PipeTransform, Inject } from '@angular/core';\nimport { BrapiConfig, _BrapiConfig } from './models';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Pipe({\n  name: 'productImage'\n})\nexport class ProductImagePipe implements PipeTransform {\n\n  private static auth: BrapiAuth = null;\n\n  constructor(\n    @Inject(BrapiConfig) private config: _BrapiConfig,\n    private _http: HttpClient\n  ){}\n  transform(value: any, args?: any): Promise<string> {\n    console.log(value, args)\n    return new Promise((resolve, reject) => {\n      let storagePath: string = window.localStorage.getItem(args+value);\n      if (storagePath) {\n        resolve(storagePath);\n      } else {\n        let _requestToken: Observable<void> = null;\n        if (!ProductImagePipe.auth)\n          _requestToken = this._logInApi();\n        else if (ProductImagePipe.auth.isExpired())\n          _requestToken = this._loginRefresh();\n\n        if (_requestToken) {\n          _requestToken.subscribe(\n            data => {\n              this._requestImage(value, args)\n                .subscribe(\n                  res => resolve(res),\n                  error => resolve('')\n                )\n            }, error => {\n              resolve('');\n            }\n          )\n        } else {\n          this._requestImage(value, args)\n          .subscribe(\n            data => resolve(data),\n            error => resolve('')\n          )\n        }\n      }\n\n    });\n  }\n\n  private _requestImage(paramn: string, type: string):Observable<string> {\n    return Observable.create(\n      observer => {\n        let type = 'pesquisarPorSku';\n        let _data : any = {\n          medida : this.config.defaultSize, \n          proposito : this.config.proposito\n        }\n        if(type == 'ean') { \n          type = 'pesquisarPorEan'; \n          _data.eans = [paramn];\n        } else {\n          _data.skus = [paramn];\n        }\n\n        this._http.post(`${this.config.pathApi}api/${type}`, _data,{ headers : {\n          \"Authorization\": `${ProductImagePipe.auth.token_type} ${ProductImagePipe.auth.access_token}`\n        }}).subscribe(\n          (data: any) => { if(data && data.length){ \n            window.localStorage.setItem(type+paramn, data[0].url);\n            observer.next(data[0].url); \n          } else observer.next(''); },\n          error => observer.next('')\n        )\n      }\n    );\n  }\n\n  private _logInApi():Observable<void> {\n    return Observable.create(\n      observer => {\n        this._http.post(`${this.config.pathApi}api/login`, \n          {\n            username: this.config.userName, \n            password: this.config.password\n          }\n        ).subscribe(\n          data => { ProductImagePipe.auth = BrapiAuth.fromData(data); observer.next() },\n          error => {console.error(error); observer.error(error)}\n        );\n      }\n    );\n  }\n\n  private _loginRefresh():Observable<void> {\n    return Observable.create(\n      observer => {\n        this._http.post(`${this.config.pathApi}/oauth/refresh_token`, \n          {\n            grant_type: \"refresh_token\",\n            refresh_token: ProductImagePipe.auth.refresh_token\n          }\n        ).subscribe(\n          data => { ProductImagePipe.auth = BrapiAuth.fromData(data); observer.next() },\n          error => {console.error(error); observer.error(error)}\n        );\n      }\n    );\n  }\n\n}\n\nclass BrapiAuth {\n\n  public username: string; \n  public roles: string[]; \n  public token_type: string;\n  public access_token: string;\n  public expires_in: number;\n  public refresh_token: string;\n  public expireIn: number;\n\n  public static fromData(data: any): BrapiAuth {\n    let object =  data as BrapiAuth;\n    object.expireIn = object.expireIn * 1000 + new Date().getTime();\n    return object;\n  }\n\n  public isExpired(): boolean{\n    return new Date().getTime() >= (this.expireIn - 30000);\n  }\n\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProductImagePipe } from './product-image.pipe';\nimport { _BrapiConfig, BrapiConfig } from './models';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [ProductImagePipe],\n  exports: [ProductImagePipe],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ]\n})\nexport class BrapiImagesModule { \n  static forRoot(config: _BrapiConfig): ModuleWithProviders{\n    return {\n      ngModule: BrapiImagesModule,\n      providers: [\n        ProductImagePipe,\n        {\n          provide: BrapiConfig,\n          useValue: config\n        }\n      ]\n    }\n  }\n}\n"]}